// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package calculator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	OperatorOne          float64  `protobuf:"fixed64,1,opt,name=operator_one,json=operatorOne,proto3" json:"operator_one,omitempty"`
	OperatorTwo          float64  `protobuf:"fixed64,2,opt,name=operator_two,json=operatorTwo,proto3" json:"operator_two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetOperatorOne() float64 {
	if m != nil {
		return m.OperatorOne
	}
	return 0
}

func (m *Request) GetOperatorTwo() float64 {
	if m != nil {
		return m.OperatorTwo
	}
	return 0
}

type Response struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c686ea360062a8cf, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "calculator.Request")
	proto.RegisterType((*Response)(nil), "calculator.Response")
}

func init() {
	proto.RegisterFile("calculator.proto", fileDescriptor_c686ea360062a8cf)
}

var fileDescriptor_c686ea360062a8cf = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xf9, 0x73, 0xb1, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x29, 0x72, 0xf1, 0xe4,
	0x17, 0xa4, 0x16, 0x81, 0x84, 0xe3, 0xf3, 0xf3, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x18, 0x83,
	0xb8, 0x61, 0x62, 0xfe, 0x79, 0xa9, 0x28, 0x4a, 0x4a, 0xca, 0xf3, 0x25, 0x98, 0x50, 0x95, 0x84,
	0x94, 0xe7, 0x2b, 0x29, 0x71, 0x71, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89,
	0x71, 0xb1, 0x15, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x40, 0xcd, 0x82, 0xf2, 0x8c, 0x7e, 0x32, 0x72,
	0x71, 0xf9, 0x83, 0xf5, 0x64, 0xe6, 0xe7, 0x15, 0x0b, 0x99, 0x73, 0x71, 0x38, 0xa6, 0xa4, 0x64,
	0x82, 0x38, 0x42, 0xc2, 0x7a, 0x48, 0xce, 0x85, 0xba, 0x4c, 0x4a, 0x04, 0x55, 0x10, 0x62, 0xba,
	0x12, 0x83, 0x90, 0x15, 0x17, 0x77, 0x70, 0x69, 0x52, 0x49, 0x51, 0x62, 0x32, 0xe9, 0x7a, 0x6d,
	0xb9, 0xf8, 0x7c, 0x4b, 0x73, 0x4a, 0x32, 0x0b, 0x72, 0x32, 0x93, 0x13, 0x49, 0xd7, 0x6e, 0xce,
	0xc5, 0xe1, 0x92, 0x59, 0x96, 0x59, 0x4c, 0xaa, 0x46, 0x27, 0xbe, 0x28, 0x1e, 0x3d, 0x7d, 0x84,
	0x54, 0x12, 0x1b, 0x38, 0x4e, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x6e, 0x93, 0x25,
	0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OperationsClient is the client API for Operations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperationsClient interface {
	Addition(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Subtraction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Multiplication(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Division(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type operationsClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsClient(cc grpc.ClientConnInterface) OperationsClient {
	return &operationsClient{cc}
}

func (c *operationsClient) Addition(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/calculator.Operations/Addition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) Subtraction(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/calculator.Operations/Subtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) Multiplication(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/calculator.Operations/Multiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) Division(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/calculator.Operations/Division", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationsServer is the server API for Operations service.
type OperationsServer interface {
	Addition(context.Context, *Request) (*Response, error)
	Subtraction(context.Context, *Request) (*Response, error)
	Multiplication(context.Context, *Request) (*Response, error)
	Division(context.Context, *Request) (*Response, error)
}

// UnimplementedOperationsServer can be embedded to have forward compatible implementations.
type UnimplementedOperationsServer struct {
}

func (*UnimplementedOperationsServer) Addition(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addition not implemented")
}
func (*UnimplementedOperationsServer) Subtraction(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtraction not implemented")
}
func (*UnimplementedOperationsServer) Multiplication(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplication not implemented")
}
func (*UnimplementedOperationsServer) Division(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Division not implemented")
}

func RegisterOperationsServer(s *grpc.Server, srv OperationsServer) {
	s.RegisterService(&_Operations_serviceDesc, srv)
}

func _Operations_Addition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).Addition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Operations/Addition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).Addition(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_Subtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).Subtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Operations/Subtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).Subtraction(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_Multiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).Multiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Operations/Multiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).Multiplication(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_Division_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).Division(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Operations/Division",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).Division(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Operations",
	HandlerType: (*OperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Addition",
			Handler:    _Operations_Addition_Handler,
		},
		{
			MethodName: "Subtraction",
			Handler:    _Operations_Subtraction_Handler,
		},
		{
			MethodName: "Multiplication",
			Handler:    _Operations_Multiplication_Handler,
		},
		{
			MethodName: "Division",
			Handler:    _Operations_Division_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
